start on android and started dbus

script
    # We need to make sure that permissions on the named pipe mentioned below are correct.
    # Hence we precreate it and ensure correct permissions, prior to the gps chipset driver
    # accessing it.
    if [ ! -e /data/gps ]; then
       mkdir -m 777 -p /data/gps       
    fi
    
    if [ ! -e /data/gps/.flp.interface.pipe.to_gpsd ]; then
       mkfifo -m 0666 /data/gps/.flp.interface.pipe.to_gpsd
    fi

    if [ ! -e /data/gps/.gps.interface.pipe.to_gpsd ]; then
       mkfifo -m 0666 /data/gps/.gps.interface.pipe.to_gpsd
    fi

    if [ ! -e /data/gps/.gps.interface.pipe.to_jni ]; then
       mkfifo -m 0666 /data/gps/.gps.interface.pipe.to_jni
    fi
    
    # normal setup
    # GPS provider
    opts="--provider gps::Provider"
    # Remote provider (Ubuntu Espoo Service over DBus; wraps HERE positioning
    # engine)
    opts="$opts --provider remote::Provider"
    opts="$opts --remote::Provider::name=com.ubuntu.espoo.Service.Provider"
    opts="$opts --remote::Provider::path=/com/ubuntu/espoo/Service/Provider"

    # wait for Android properties system to be ready
    while [ ! -e /dev/socket/property_service ]; do sleep 0.1; done

    # Check if we need to use the fake provider instead
    if [ "$(getprop custom.location.fake)" = "true" ]; then
        lat="$(getprop custom.location.lat 51.505660)"
        lon="$(getprop custom.location.lon -0.099850)"
        # reset to just the dummy provider
        opts="--provider dummy::Provider"
        opts="$opts --dummy::Provider::ReferenceLocationLat=$lat"
        opts="$opts --dummy::Provider::ReferenceLocationLon=$lon"
    fi

    if [ "$(getprop custom.location.testing)" = "true" ]; then
        export TRUST_STORE_PERMISSION_MANAGER_IS_RUNNING_UNDER_TESTING="1"
    fi

    exec /usr/bin/ubuntu-location-serviced --bus system $opts
end script

